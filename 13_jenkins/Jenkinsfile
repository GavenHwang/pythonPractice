pipeline {

    agent {
        node {
            label 'master'
        }
    }

    parameters {
        extendedChoice(
            defaultValue: 'scnet',
            description: '项目类型',
            descriptionPropertyValue: '平台端,集群端,通用市场',
            multiSelectDelimiter: ',',
            name: 'project_type',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_SINGLE_SELECT',
            value: 'scnet,gridview,mix',
            visibleItemCount: 4
        )
        reactiveChoice(
            choiceType: 'PT_SINGLE_SELECT',
            description: '环境选择',
            filterLength: 1,
            filterable: false,
            name: 'choose_env',
            randomName: 'choice-parameter-7071246941551565',
            referencedParameters: 'project_type',
            script: groovyScript(
                fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: 'return ["error"]'],
                script: [
                    classpath: [],
                    oldScript: '',
                    sandbox: true,
                    script: '''
                        if (project_type.equals("scnet")){
                            return ["itos", "itos2", "233", "xhnet", "template"]
                        }else if (project_type.equals("gridview")){
                            return ["10.2.14.217", "10.0.50.36", "template"]
                        } else if (project_type.equals("mix")){
                            return ["10.0.31.99", "template"]
                        }
                    '''
                ]
            )
        )
        text(
            name: 'extended_parameters',
            description: '''扩展参数，自定义配置文件，choose_env环境选择template时生效，示例：
host: http://10.0.31.55''',
        )
        gitParameter(
            name: 'branch',
            type: 'branch',
            defaultValue: 'origin/dev/3.0',
            description: '选择分支',
            useRepository: 'git@gitlab.hpc.sugon.com:hpc_test/e2e.git',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            listSize: '5'
        )
        string(
            name: 'feishu_api',
            description: '''增量接口列表飞书文档链接（增量接口测试，必填参数），模板文件：
平台端：https://sugon-hpc.feishu.cn/sheets/Pkw1snOEnhdejqtkPGmcbJohnuc
集群端：https://sugon-hpc.feishu.cn/sheets/TZqvsjghyh8SyJtjJ9OcTIjvn1f
通用市场：https://sugon-hpc.feishu.cn/sheets/EpM8sWdzahQQzDtfjuZcyjhan4b'''
        )
        string(
            name: 'feishu_url',
            description: '''增量页面列表飞书文档链接（增量页面检查，必填参数），飞书文档地址链接，为空默认使用代码中的文件，填写时将自动下载并覆盖代码中的默认文件，模板文件：
平台端：https://sugon-hpc.feishu.cn/sheets/I7aMsYgqFhRQWatQRefc1LannZe?sheet=2qVDGh
集群端：https://sugon-hpc.feishu.cn/sheets/Qon7sbDMXh7oqatzt4icBY30nYc?sheet=2qVDGh
通用市场：https://sugon-hpc.feishu.cn/sheets/Iauds1rQkhdn5PtdEhwcDCMAnve?sheet=2qVDGh'''
        )
        extendedChoice(
            name: 'jobs_to_run',
            value: 'fn_test,project_api_test,api_test,project_url_check,url_check',
            defaultValue: 'fn_test,api_test,url_check',
            description: '选择测试项（按住ctrl键进行多选）',
            descriptionPropertyValue: '黄金流程,增量单接口,全量单接口,增量页面检查,全量页面检查',
            multiSelectDelimiter: ',',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_MULTI_SELECT',
            visibleItemCount: 5
        )
        extendedChoice(
            name: 'to_users',
            description: '给那儿些用户发送飞书通知（按住ctrl键进行多选）',
            propertyFile: '/root/.jenkins/build_params.properties',
            propertyKey: 'phoneNumbers',
            defaultPropertyFile: '/root/.jenkins/build_params.properties',
            defaultPropertyKey: 'phoneNumbers',
            descriptionPropertyFile: '/root/.jenkins/build_params.properties',
            descriptionPropertyKey: 'userNames',
            multiSelectDelimiter: ',',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_MULTI_SELECT',
            visibleItemCount: 10
        )

    }

    stages{
        stage('拉取代码') {
            // 设置显示标题
            post {
                always {
                    script {
                        def jobMapping = [
                            'fn_test': '黄金流程',
                            'project_api_test': '增量单接口',
                            'api_test': '全量单接口',
                            'project_url_check': '增量页面检查',
                            'url_check': '全量页面检查',
                        ]
                        def jobsArray = "${params.jobs_to_run}".split(',')
                        def jobsMappings = []
                        jobsArray.each { input ->
                            if (jobMapping.containsKey(input)) {
                                jobsMappings << jobMapping[input]
                            }
                        }
                        def buildUser = 'timer or trigger'
                        def buildCauses = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
                        if (buildCauses) {
                            buildUser = buildCauses.first().userId
                        }
                        currentBuild.displayName = "#${BUILD_NUMBER} - ${buildUser}"
                        currentBuild.description = "项目类型：${params.project_type}\n构建环境：${params.choose_env}\n构建项目：${jobsMappings.join(', ')}"
                    }
                }
            }
            steps {
                git credentialsId: '454ccc10-f2e0-461b-8be8-0948fbee311d', url: 'git@gitlab.hpc.sugon.com:hpc_test/e2e.git'
            }
        }

        stage('黄金流程') {
            when {
                expression {
                    return ('fn_test' in "${params.jobs_to_run}".split(",") && "${params.choose_env}" != "scnet" && "${params.choose_env}" != "scnet-demo")
                }
            }
            steps {
                script {
                    def jobName = "功能测试"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'extended_parameters', value:"${params.extended_parameters}"),
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'choose_file', value: "sacp_gold_process.yaml"),
                        string(name: 'hook', value: "init_user"),
                        string(name: 'to_users', value: "${params.to_users}"),
                    ]
                }
            }
        }

        stage('增量单接口') {
            when {
                expression {
                  return ('project_api_test' in "${params.jobs_to_run}".split(",") && "${params.choose_env}" != "scnet" && "${params.choose_env}" != "scnet-demo")
                }
            }
            steps {
                script {
                    def jobName = "接口测试"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'project_type', value: "${params.project_type}"),
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'extended_parameters', value:"${params.extended_parameters}"),
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'feishu_xlsx_file_url', value:"${params.feishu_api}"),
                        string(name: 'to_users', value: "${params.to_users}"),
                    ]
                }
            }
        }

        stage('全量单接口') {
            when {
                expression {
                    return ('api_test' in "${params.jobs_to_run}".split(",") && "${params.choose_env}" != "scnet" && "${params.choose_env}" != "scnet-demo")
                }
            }
            steps {
                script {
                    def jobName = "接口测试"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'project_type', value: "${params.project_type}"),
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'extended_parameters', value:"${params.extended_parameters}"),
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'to_users', value: "${params.to_users}"),
                    ]
                }
            }
        }

        stage('增量页面检查') {
            when {
                expression {
                    return ('url_check' in "${params.jobs_to_run}".split(",") && "${params.choose_env}" != "scnet" && "${params.choose_env}" != "scnet-demo")
                }
            }
            steps {
                script {
                    def jobName = "页面检查"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'project_type', value: "${params.project_type}"),
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'extended_parameters', value:"${params.extended_parameters}"),
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'feishu_xlsx_file_url', value:"${params.feishu_url}"),
                        string(name: 'to_users', value: "${params.to_users}"),
                        string(name: 'hook', value: "init_user"),
                    ]
                }
            }
        }

        stage('全量页面检查') {
            when {
                expression {
                    return ('url_check' in "${params.jobs_to_run}".split(",") && "${params.choose_env}" != "scnet" && "${params.choose_env}" != "scnet-demo")
                }
            }
            steps {
                script {
                    def jobName = "SACP页面检查"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'project_type', value: "${params.project_type}"),
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'extended_parameters', value:"${params.extended_parameters}"),
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'to_users', value: "${params.to_users}"),
                        string(name: 'hook', value: "init_user"),
                    ]
                }
            }
        }
    }
}
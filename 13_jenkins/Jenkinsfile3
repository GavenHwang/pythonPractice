pipeline {

    agent {
        node {
            label 'master'
        }
    }

    parameters {
        choice(
            name: 'choose_env',
            choices: ['scnet', 'www1', 'scnet-demo'],
            description: '选择构建环境'
        )
        gitParameter(
            name: 'branch',
            type: 'branch',
            defaultValue: 'origin/master',
            description: '选择分支',
            useRepository: 'git@gitlab.hpc.sugon.com:hpc_test/e2e.git',
            branchFilter: 'origin/master',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            listSize: '5'
        )

        extendedChoice(
            name: 'jobs_to_run',
            value: 'sacp_fn_test,sacp_url_check,sacp_openapi_test',
            defaultValue: 'sacp_fn_test,sacp_url_check,sacp_openapi_test',
            description: '选择测试项（按住ctrl键进行多选）',
            descriptionPropertyValue: 'SACP功能测试(sacp_scnet.yaml用例集),SACP页面检查(普通用户),OpenAPI接口测试(普通用户)',
            multiSelectDelimiter: ',',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_MULTI_SELECT',
            visibleItemCount: 5
        )
        extendedChoice(
            name: 'to_users',
            description: '给那儿些用户发送飞书通知（按住ctrl键进行多选）',
            propertyFile: '/root/.jenkins/build_params.properties',
            propertyKey: 'phoneNumbers',
            defaultPropertyFile: '/root/.jenkins/build_params.properties',
            defaultPropertyKey: 'phoneNumbers',
            descriptionPropertyFile: '/root/.jenkins/build_params.properties',
            descriptionPropertyKey: 'userNames',
            multiSelectDelimiter: ',',
            quoteValue: false,
            saveJSONParameterToFile: false,
            type: 'PT_MULTI_SELECT',
            visibleItemCount: 10
        )

    }

	stages{

	    stage('拉取代码') {
	        // 设置显示标题
	        post {
                always {
                    script {
                        def jobMapping = [
                            // 'sacp_project_api_test': 'SACP单接口测试(新增修改)',
                            // 'sacp_api_test': 'SACP单接口测试',
                            'sacp_fn_test': 'SACP功能测试',
                            'sacp_url_check': 'SACP页面检查',
                            'sacp_openapi_test': 'OpenAPI接口测试',
                        ]
                        def jobsArray = "${params.jobs_to_run}".split(',')
                        def jobsMappings = []
                        jobsArray.each { input ->
                            if (jobMapping.containsKey(input)) {
                                jobsMappings << jobMapping[input]
                            }
                        }

                        def buildUser = 'timer or trigger'
                        def buildCauses = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
                        if (buildCauses) {
                            buildUser = buildCauses.first().userId
                        }
                        currentBuild.displayName = "#${BUILD_NUMBER} - ${buildUser}"
                        currentBuild.description = "构建分支：${params.branch}\n构建环境：${params.choose_env}\n构建项目：${jobsMappings.join(', ')}"
                    }
                }
            }
	        // 拉取代码
            steps {
                git credentialsId: '454ccc10-f2e0-461b-8be8-0948fbee311d', url: 'git@gitlab.hpc.sugon.com:hpc_test/e2e.git'
                // sh "git submodule update --init && git submodule update --remote"
            }
        }

    //     stage('SACP单接口测试') {
    //         when {
		  //      expression {
		  //          return ('sacp_api_test' in "${params.jobs_to_run}".split(",") && "${params.choose_env}" != "scnet" && "${params.choose_env}" != "scnet-demo")
		  //      }
		  //  }
    //         steps {
    //             script {
    //                 def jobName = "SACP单接口测试"
    //                 def job = build job: jobName, propagate: false, wait: true, parameters:[
    //                     string(name: 'branch', value: "${params.branch}"),
    //                     string(name: 'choose_env', value: "${params.choose_env}"),
    //                     // string(name: 'concurrence_params', value: "-n auto --dist load"),
    //                     string(name: 'to_users', value: "${params.to_users}"),
    //                 ]
    //             }
    //         }
    //     }

        stage('SACP功能测试(sacp_scnet.yaml用例集)') {
		    when {
		        expression {
		            return ('sacp_fn_test' in "${params.jobs_to_run}".split(","))
		        }
		    }
            steps {
                script {
                    def jobName = "SACP功能测试"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'choose_file', value: "sacp_scnet.yaml"),
                        string(name: 'hook', value: ""),
                        string(name: 'to_users', value: "${params.to_users}"),
                    ]
                }
            }
        }

        stage('SACP页面检查(普通用户)') {
		    when {
		        expression {
		            return ('sacp_url_check' in "${params.jobs_to_run}".split(","))
		        }
		    }
            steps {
                script {
                    def jobName = "SACP页面检查"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'choose_env', value: "${params.choose_env}"),
                        string(name: 'select_sheet_names', value: "6.x官网,6.x帮助文档,6.x控制台"),
                        string(name: 'select_roles', value: "visitor,common"),
                        booleanParam(name: 'init_users', value: false),
                        string(name: 'concurrency_num', value: "5"),
                        string(name: 'to_users', value: "${params.to_users}"),
                    ]
                }
            }
        }

        stage('OpenAPI接口测试(普通用户)') {
		    when {
		        expression {
		            return ('sacp_openapi_test' in "${params.jobs_to_run}".split(","))
		        }
		    }
            steps {
                script {
                    def jobName = "test_openapi_suites"
                    def job = build job: jobName, propagate: false, wait: true, parameters:[
                        string(name: 'branch', value: "${params.branch}"),
                        string(name: 'config', value: "${params.choose_env}"),
                        string(name: 'TEST_SUITE', value: "ac-openapi,efile-openapi,gv-openapi,ai-openapi"),
                        string(name: 'mark', value: "prod"),
                        string(name: 'functions_match_rule', value: "test_*_01"),
                        string(name: 'to_users', value: "${params.to_users}"),
                    ]
                }
            }
        }
	}
}